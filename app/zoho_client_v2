"""
zoho_client_v2.py ‚Äî Cliente Zoho Analytics API v2 (Render-ready)
- Export Data v2:  /api/v2/workspaces/{workspaceId}/views/{viewName}/data  (POST)
- SQL v2:          /api/v2/workspaces/{workspaceId}/sql                     (POST)
"""

import os
from typing import Optional
from urllib.parse import quote

import requests

from .config import settings


# ================================================================
# Tokens (reutiliza OAuth con refresh token)
# ================================================================

def get_access_token_v2(force_refresh: bool = False) -> str:
    """Devuelve access token; refresca si se pide o falta."""
    if force_refresh:
        return _refresh_access_token()

    token = os.getenv("ZOHO_ACCESS_TOKEN")
    if token:
        return token
    return _refresh_access_token()


def _refresh_access_token() -> str:
    refresh_token = os.getenv("ZOHO_REFRESH_TOKEN")
    client_id = os.getenv("ZOHO_CLIENT_ID")
    client_secret = os.getenv("ZOHO_CLIENT_SECRET")

    if not (refresh_token and client_id and client_secret):
        raise RuntimeError("Faltan creds OAuth (REFRESH/CLIENT_ID/CLIENT_SECRET).")

    url = settings.ZOHO_ACCOUNTS_BASE.rstrip("/") + "/oauth/v2/token"
    data = {
        "refresh_token": refresh_token,
        "client_id": client_id,
        "client_secret": client_secret,
        "grant_type": "refresh_token",
    }
    r = requests.post(url, data=data, timeout=30)
    if r.status_code != 200:
        raise RuntimeError(f"Refresh token FAILED {r.status_code}: {r.text}")
    new_token = r.json().get("access_token")
    if not new_token:
        raise RuntimeError(f"Refresh token sin access_token: {r.text}")
    os.environ["ZOHO_ACCESS_TOKEN"] = new_token
    print("üîÅ Nuevo access token (v2).")
    return new_token


# ================================================================
# Helpers
# ================================================================

def _api_v2_base() -> str:
    return settings.ZOHO_ANALYTICS_API_BASE.rstrip("/") + "/api/v2"


def _workspace_id(ws_id: Optional[str] = None) -> str:
    val = ws_id or settings.ZOHO_WORKSPACE_ID
    if not val or not str(val).strip():
        raise ValueError("Falta ZOHO_WORKSPACE_ID (num√©rico) en variables.")
    return str(val).strip()


# ================================================================
# Export Data v2
# ================================================================

def v2_export_view(view: str,
                   limit: Optional[int] = None,
                   offset: int = 0,
                   workspace_id: Optional[str] = None) -> dict:
    """
    Exporta filas de una vista/tabla por API v2.
    POST /api/v2/workspaces/{workspaceId}/views/{view}/data
    Body: { "limit": N, "offset": M }
    """
    ws_id = _workspace_id(workspace_id)
    base = _api_v2_base()
    view_enc = quote(view, safe="")
    url = f"{base}/workspaces/{ws_id}/views/{view_enc}/data"

    body = {
        "limit": int(limit if (limit and limit > 0) else settings.DEFAULT_LIMIT),
        "offset": int(offset if offset >= 0 else 0),
    }

    headers = {
        "Authorization": f"Zoho-oauthtoken {get_access_token_v2()}",
        "Accept": "application/json",
        "Content-Type": "application/json",
    }

    print(f"[V2][VIEW] POST {url} body={body}")
    resp = requests.post(url, headers=headers, json=body, timeout=90)

    # token expirado
    if resp.status_code == 401 and "invalid_token" in resp.text:
        headers["Authorization"] = f"Zoho-oauthtoken {get_access_token_v2(force_refresh=True)}"
        resp = requests.post(url, headers=headers, json=body, timeout=90)

    if resp.status_code != 200:
        raise RuntimeError(f"v2_export_view failed.\nURL: {url}\nstatus: {resp.status_code}\nbody:\n{resp.text}")

    try:
        return resp.json()
    except Exception:
        raise RuntimeError(f"Respuesta no JSON en v2_export_view:\n{resp.text[:600]}")


# ================================================================
# SQL v2
# ================================================================

def v2_sql_query(sql: str, workspace_id: Optional[str] = None) -> dict:
    """
    Ejecuta SQL por API v2.
    POST /api/v2/workspaces/{workspaceId}/sql
    Body: { "sql": "<consulta>" }
    """
    if not sql or not sql.strip():
        raise ValueError("sql vac√≠o.")

    ws_id = _workspace_id(workspace_id)
    base = _api_v2_base()
    url = f"{base}/workspaces/{ws_id}/sql"

    body = {"sql": sql}

    headers = {
        "Authorization": f"Zoho-oauthtoken {get_access_token_v2()}",
        "Accept": "application/json",
        "Content-Type": "application/json",
    }

    print(f"[V2][SQL] POST {url}")
    resp = requests.post(url, headers=headers, json=body, timeout=120)

    # token expirado
    if resp.status_code == 401 and "invalid_token" in resp.text:
        headers["Authorization"] = f"Zoho-oauthtoken {get_access_token_v2(force_refresh=True)}"
        resp = requests.post(url, headers=headers, json=body, timeout=120)

    if resp.status_code != 200:
        raise RuntimeError(f"v2_sql_query failed.\nURL: {url}\nstatus: {resp.status_code}\nbody:\n{resp.text}")

    try:
        return resp.json()
    except Exception:
        raise RuntimeError(f"Respuesta no JSON en v2_sql_query:\n{resp.text[:600]}")
